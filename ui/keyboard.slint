import { EmptyWrapper } from "./empty_wrapper.slint";
import { Key } from "./key.slint";

export global KeyboardAdapter {
    in-out property <int> octaves_number: 1;
    in-out property <int> initial_octave: 4;
    out property <[int]> black_semitone_offsets: [1, 3, -1, 6, 8, 10, -1];
    out property <[int]> white_semitone_offsets: [0, 2, 4, 5, 7, 9, 11];

    callback key_pressed(midi_note_number: int);
    callback key_released(midi_note_number: int);
}

export component Keyboard {
    HorizontalLayout {
        for octave in KeyboardAdapter.octaves_number : EmptyWrapper {
            HorizontalLayout {
                for offset in KeyboardAdapter.white_semitone_offsets : Key {
                    midi_note_number: (KeyboardAdapter.initial_octave + 1) * 12 + offset;

                    key_pressed(midi_note_number) => {
                        KeyboardAdapter.key_pressed(midi_note_number);
                    }
                    key_released(midi_note_number) => {
                        KeyboardAdapter.key_released(midi_note_number);
                    }
                }
            }
            HorizontalLayout {
                x: 35px;
                y: -45px;
                for offset in KeyboardAdapter.black_semitone_offsets : EmptyWrapper {
                    if offset != -1 : Key {
                        is_black: true;
                        midi_note_number: (KeyboardAdapter.initial_octave + 1) * 12 + offset;

                        key_pressed(midi_note_number) => {
                            KeyboardAdapter.key_pressed(midi_note_number);
                        }
                        key_released(midi_note_number) => {
                            KeyboardAdapter.key_released(midi_note_number);
                        }
                    }
                }
            }
        }
        // Extra C note
        Key {
            midi_note_number: (KeyboardAdapter.initial_octave + KeyboardAdapter.octaves_number + 1) * 12;

            key_pressed(midi_note_number) => {
                KeyboardAdapter.key_pressed(midi_note_number);
            }
            key_released(midi_note_number) => {
                KeyboardAdapter.key_released(midi_note_number);
            }
        }
    }
}
