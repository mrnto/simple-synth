export component Knob inherits Rectangle {
    property <angle> min_angle: 120deg;
    property <angle> max_angle: 60deg;
    in-out property <angle> angle: root.min_angle;

    callback angle_changed(angle: angle);

    pure function normalize_angle(angle: angle) -> angle {
        return (angle + 360deg).mod(360deg);
    }

    width: 50px;
    height: 50px;
    background: #222222;
    border-color: #111111;
    border-radius: self.width / 2;
    border-width: 1px;

    touch_area := TouchArea {
        property <length> center_x: self.width / 2;
        property <length> center_y: self.height / 2;
        property <length> relative_x;
        property <length> relative_y;
        property <angle> last_angle;
        property <angle> new_angle;
        property <angle> next_angle;
        property <bool> hovering: Math.pow(relative_x / 1px, 2) + Math.pow(relative_y / 1px, 2) < root.width / 2px * root.height / 2px;
        property <bool> touching: false;
        
        width: 100%;
        height: 100%;
        mouse-cursor: touching ? move : hovering ? grab : default;

        pointer-event(event) => {
            relative_x = touch_area.mouse-x - center_x;
            relative_y = touch_area.mouse-y - center_y;
            new_angle = normalize_angle(atan2(relative_y / 1px, relative_x / 1px));
            if event.kind == PointerEventKind.down {
                if hovering {
                    touching = true;
                    last_angle = new_angle;
                }
            } else if event.kind == PointerEventKind.up {
                touching = false;
            } else if event.kind == PointerEventKind.move {
                if touching {
                    next_angle = normalize_angle(root.angle - last_angle + new_angle);
                    if next_angle >= min_angle || next_angle <= max_angle {
                        root.angle = next_angle;
                        root.angle_changed(root.angle);
                    }
                    last_angle = new_angle;
                }
            }
        }
    }

    marker := Rectangle {
        x: root.width / 2;
        y: root.height / 2;

        Rectangle {
            property <float> r: 0.5;
            x: r * root.width / 2 * root.angle.cos() - self.width / 2;
            y: r * root.height / 2 * root.angle.sin() - self.height / 2;
            width: 10px;
            height: 10px;
            border-radius: self.width / 2;
            background: #ffffff;
        }
    }
}
