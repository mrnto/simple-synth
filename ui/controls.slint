import { ComboBox, GroupBox, HorizontalBox, VerticalBox } from "std-widgets.slint";
import { Knob } from "knob.slint";

export global ControlsAdapter {
    callback waveform_selected(waveform: string);
    callback attack_changed(attack: float);
    callback decay_changed(decay: float);
    callback sustain_changed(sustain: float);
    callback release_changed(release: float);
    callback cutoff_changed(cutoff: float);
    callback resonance_changed(resonance: float);
    callback filter_mode_selected(mode: string);

    // pure public function normalize_angle_range(angle: angle) -> float {
    //     return (angle - 60deg) / (120deg - 60deg);
    // }

    // TODO: move
    pure public function normalize_angle_range(angle: angle) -> float {
        if angle >= 120deg && angle <= 360deg {
            return (angle - 120.0deg) / 300.0deg;
        } else {
            return (angle - 120.0deg + 360.0deg) / 300.0deg;
        }
    }
}

export component Controls inherits VerticalBox {
    ComboBox {
        model: [
            @tr("Sine"),
            @tr("Square"),
            @tr("Triangle"),
            @tr("Sawtooth"),
            @tr("Noise")
        ];
        current-index: 0;
        
        selected(waveform) => {
            ControlsAdapter.waveform_selected(waveform);
        }
    }

    GroupBox {
        title: @tr("Envelope");
        vertical-stretch: 0;

        HorizontalBox {
            attack := Knob {
                angle_changed(angle) => {
                    ControlsAdapter.attack_changed(ControlsAdapter.normalize_angle_range(angle));
                }
            }
            decay := Knob {
                angle_changed(angle) => {
                    ControlsAdapter.decay_changed(ControlsAdapter.normalize_angle_range(angle));
                }
            }
            sustain := Knob {
                angle_changed(angle) => {
                    ControlsAdapter.sustain_changed(ControlsAdapter.normalize_angle_range(angle));
                }
            }
            release := Knob {
                angle_changed(angle) => {
                    ControlsAdapter.release_changed(ControlsAdapter.normalize_angle_range(angle));
                }
            }
        }
    }
    
    GroupBox {
        title: @tr("Filter");
        vertical-stretch: 0;

        filter_mode := ComboBox {
            model: [
                @tr("Lowpass"),
                @tr("Highpass"),
                @tr("Bandpass"),
            ];
            current-index: 0;
            
            selected(mode) => {
                ControlsAdapter.filter_mode_selected(mode);
            }
        }

        HorizontalBox {
            cutoff := Knob {
                angle_changed(angle) => {
                    ControlsAdapter.cutoff_changed(ControlsAdapter.normalize_angle_range(angle));
                }
            }
            resonance := Knob {
                angle_changed(angle) => {
                    ControlsAdapter.resonance_changed(ControlsAdapter.normalize_angle_range(angle));
                }
            }
        }
    }
}
